import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static int n,cnt;
	public static int[][] arr;
	public static int[][] visited;
	public static LinkedList<Node> timeList;
	public static LinkedList<Node> visitedList;
    public static void main(String args[]) throws Exception {
       
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer stzr;
    	
    	n = Integer.parseInt(br.readLine());
    	arr = new int[n+2][n+2];
    	visited = new int[n+1][n+1];
    	timeList = new LinkedList<Node>();
    	visitedList = new LinkedList<Node>();
    	int m = Integer.parseInt(br.readLine());
    	
    	for(int i=0;i<m;i++) {
    		stzr = new StringTokenizer(br.readLine());
    		int x = Integer.parseInt(stzr.nextToken());
    		int y = Integer.parseInt(stzr.nextToken());
    		arr[x][y]=1;
    	}
    	
    	int l = Integer.parseInt(br.readLine());
    	for(int i=0;i<l;i++) {
    		stzr = new StringTokenizer(br.readLine());
    		int x = Integer.parseInt(stzr.nextToken());
    		char y = stzr.nextToken().charAt(0);
    		if(y=='L') {
    			timeList.add(new Node(x,0)); //왼쪽이 0
    		}else if(y=='D'){
    			timeList.add(new Node(x,1)); //오른쪽이 1
    		}
    	}
    	
    	dummy();
    	System.out.println(cnt);
	}
    public static void dummy() {
    	int dir =0;
    	visited[1][1]=1;
    	int x =1;
    	int y= 1;
    	cnt=0;
    	visitedList.add(new Node(x,y));
    	//사과가 있는지 체크 -없으면 그 전에 있는거 false로 만들고 앞에꺼 체크
    	// 있으면 앞에꺼 체크 만들고 그리고 arr[] =0 만들기
    	y=y+1;
    	while(true) {
    		if(checked(x,y) || visited[x][y]==1) { //벽을 만나거나 visited[]=true인걸 볼때
    			cnt++;
    			break;
    		}
    		switch(dir) {
    		case 0:
    			apple(x,y);
    			break;
    		case 1:
    			apple(x,y);
    			break;
    		case 2:
    			apple(x,y);
    			break;
    		case 3:
    			apple(x,y);
    			break;
    		}
    		
    		if(!timeList.isEmpty() &&timeList.get(0).time==cnt) {
    			int direction = timeList.get(0).dir;
    			timeList.remove(0);
    			
    			if(direction==0) {
    				dir = (dir+3)%4;
    			}
    			else if(direction==1) {
    				dir = (dir+1)%4;
    			}	
    		}
    		if(dir==0) {
    			y=y+1;	
    		}else if(dir==1) {
    			x=x+1;
    		}else if(dir==2) {
    			y=y-1;
    		}else if(dir==3) {
    			x=x-1;
    		}
    	}
    }
    
    public static boolean checked(int x, int y) {
		
    	if(x<=0 || y<=0 || x>=n+1 ||y>=n+1) {
    		return true;
    	}
		return false;
	}
    
	public static void apple(int x, int y) {
    	visited[x][y]=1;
    	visitedList.add(new Node(x,y));
    	if(arr[x][y]==1) {
    		arr[x][y]=0;
    	}
    	else if(arr[x][y]==0) {
    		Node node = visitedList.get(0);
    		visitedList.remove(0);
    		visited[node.time][node.dir]=0;
    		//visited되어 있는 애 받아서 그 좌표 찾아서
    		//list에서는 지우고
    		//visited false만들기
    	}
    	cnt++;
    }
	
    public static class Node{
    	int time;
    	int dir;
    	
    	public Node(int time, int dir) {
    		this.time =time;
    		this.dir = dir;
    	}
    }
}
