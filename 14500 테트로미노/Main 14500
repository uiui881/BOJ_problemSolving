import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static int n, m, max= Integer.MIN_VALUE;
	public static int[][] arr, visited;
	public static int[] X = {-1,1,0,0};
	public static int[] Y = {0,0,-1,1};
	public static StringBuilder sb = new StringBuilder();
    public static void main(String args[]) throws Exception {
       
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer stzr = new StringTokenizer(br.readLine());
    	
    	n = Integer.parseInt(stzr.nextToken());
    	m = Integer.parseInt(stzr.nextToken());
    	
    	arr = new int[n][m];
    	visited = new int[n][m];
    	
    	for(int i=0;i<n;i++) {
    		stzr = new StringTokenizer(br.readLine());
    		for(int j=0;j<m;j++) {
    			arr[i][j] = Integer.parseInt(stzr.nextToken());
    		}
    	}
    	
    	for(int i=0;i<n;i++) {
    		for(int j=0;j<m;j++) {
    			visited[i][j]=1;
    			DFS(i,j,0,arr[i][j]);
    			visited[i][j]=0;
    			
    			another(i,j);
    		}
    	}
    	System.out.println(max);
	}
	public static void another(int x, int y) {
		
		if(x-1>=0 && y-1>=0 && x+1<n && y+1<m) {
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x][y-1]+arr[x][y+1]);
			max = Math.max(max, arr[x+1][y]+arr[x][y]+arr[x][y-1]+arr[x][y+1]);
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x+1][y]+arr[x][y+1]);
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x+1][y]+arr[x][y-1]);
		}
		
		if(x-1<0 && (y-1>=0 && y+1<m)) {
			max = Math.max(max, arr[x+1][y]+arr[x][y]+arr[x][y-1]+arr[x][y+1]);
		}
		if(x+1>=n && (y-1>=0 && y+1<m)) {
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x][y-1]+arr[x][y+1]);
		}
		if(y-1<0 && (x-1>=0 && x+1<n)) {
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x+1][y]+arr[x][y+1]);
		}
		if(y+1>=m && (x-1>=0 && x+1<n)) {
			max = Math.max(max, arr[x-1][y]+arr[x][y]+arr[x+1][y]+arr[x][y-1]);
		}
	}
	public static void DFS(int x, int y, int depth, int cnt) {
		if(depth==3) {
			max = max < cnt ? cnt : max;
			return;
		}
		
		int dx, dy;
		for(int i=0;i<4;i++) {
			dx = x+X[i];
			dy = y+Y[i];
			
			if(checked(dx,dy) && visited[dx][dy]==0) {
				visited[dx][dy]=1;
				DFS(dx, dy, depth+1, cnt+arr[dx][dy]);
				visited[dx][dy]=0;
			}
		}
		
	}
	public static boolean checked(int x, int y) {
		
		if(x<0 || y<0 || x>=n || y>=m) {
			return false;
		}
		return true;
	}
}
