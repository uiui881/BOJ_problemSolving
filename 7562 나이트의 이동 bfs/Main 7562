import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main {
	
	public static int[][] map;
	public static int[][] visited;
	public static int[] arrayX= {2,1,2,1,-2,-1,-2,-1};
	public static int[] arrayY= {1,2,-1,-2,1,2,-1,-2};
	public static Queue<Node> queue;
	public static int I;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer stzr;
		StringBuilder sb = new StringBuilder();
		
		int T = Integer.parseInt(br.readLine());
		while(T-- >0) {
			I = Integer.parseInt(br.readLine());
			map = new int[I][I];
			visited = new int[I][I];
			queue = new LinkedList<Node>();
			stzr = new StringTokenizer(br.readLine());
			int nowX = Integer.parseInt(stzr.nextToken());
			int nowY = Integer.parseInt(stzr.nextToken());
			stzr = new StringTokenizer(br.readLine());
			int endX = Integer.parseInt(stzr.nextToken());
			int endY = Integer.parseInt(stzr.nextToken());
			
			queue.add(new Node(nowX, nowY, 0));
			visited[nowX][nowY]=1;
			
			while(!queue.isEmpty()) {
				Node node = queue.poll();
				
				int x = node.x;
				int y = node.y;
				int cost = node.cost;
				
				if(x == endX && y == endY) {
					sb.append(cost+"\n");
					break;
				}
				
				for(int i=0;i<8;i++) {
					int dx = x + arrayX[i];
					int dy = y + arrayY[i];
					
					if(check(dx, dy) && visited[dx][dy]==0) {
						queue.add(new Node(dx, dy, cost+1));
						visited[dx][dy]=1;
					}
				}
			}
		}
		System.out.println(sb);
	}
	public static boolean check(int x, int y) {
		if(x>=0 && x<I && y>=0 && y<I) {
			return true;
		}
		return false;
	}
	public static class Node{
		int x;
		int y;
		int cost;
		
		Node(int x, int y, int cost){
			this.x = x;
			this.y = y;
			this.cost = cost;
		}
	}
}
