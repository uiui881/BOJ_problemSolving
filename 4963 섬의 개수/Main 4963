import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	public static int[][] map;
	public static int[][] visited;
	public static int[] arrayX = {-1,1,0,0,1,1,-1,-1};
	public static int[] arrayY = {0,0,-1,1,1,-1,1,-1};
	public static int w, h;
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer stzr;
		
		while(true) {
			stzr = new StringTokenizer(br.readLine());
			h = Integer.parseInt(stzr.nextToken());
			w = Integer.parseInt(stzr.nextToken());
			int num=0;
			
			if(w==0 && h==0) {
				break;
			}
			
			map = new int[w][h];
			visited = new int[w][h];
			
			for(int i=0;i<w;i++) {
				stzr = new StringTokenizer(br.readLine());
				for(int j=0;j<h;j++) {
					map[i][j]= Integer.parseInt(stzr.nextToken());
				}
			}//맵 완성
			
			for(int i=0;i<w;i++) {
				for(int j=0;j<h;j++) {
					if(map[i][j]==1 && visited[i][j]==0) {
						DFS(i,j);
						num++;
					}
				}
			}
			sb.append(num+"\n");
		}
		System.out.println(sb);
	}
	
	public static void DFS(int x, int y) {
		visited[x][y]=1;
		int dx, dy;
		for(int i=0;i<8;i++) {
			dx = x+arrayX[i];
			dy = y+arrayY[i];
			
			if(dx>=0 && dx<w && dy>=0 && dy<h && map[dx][dy]==1 && visited[dx][dy]==0) {
				DFS(dx,dy);
			}
		}
	}
}
