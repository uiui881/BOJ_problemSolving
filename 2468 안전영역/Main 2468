import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Main {
	
	public static int[][] map;
	public static int[][] visited;
	public static int[] arrayX= {-1,1,0,0};
	public static int[] arrayY= {0,0,-1,1};
	public static int[] safeArea;
	public static int n;
    public static void main(String[] args) throws Exception {
    	
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       StringTokenizer stzr;
       
       n = Integer.parseInt(br.readLine()); 
       map = new int[n][n];
       visited = new int[n][n];
       
       for(int i=0; i<n;i++) { 
    	   stzr = new StringTokenizer(br.readLine());
    	   for(int j=0; j<n;j++) {
    		   map[i][j]= Integer.parseInt(stzr.nextToken());
    	   }
       }//map 완성
       
       int min=map[0][0];
       int max= map[0][0];
       for(int i=0; i<n;i++) {
    	   for(int j=0; j<n;j++) {
    		   max = map[i][j]>max ? map[i][j] : max;
    		   min = map[i][j]<min ? map[i][j] : min;
     	   }
       }// 설정 값 완성 
       safeArea =  new int[max]; //이건 n이 아니고 max개임!!!!!
       for(int num=min-1;num<=max;num++) {
    	    //하나도 가라앉지 않는 것도 세기!!!!
    	 setZero(visited);
    	 
    	  for(int i=0; i<n;i++) {
    		  for(int j=0;j<n;j++) {
    		   if(map[i][j]>num && visited[i][j]==0) {
    			   DFS(i,j,num);
    			   safeArea[num]++;
    		   	 }
    		  }
    	  } 
       }
       
       int maxAreaNum = safeArea[0];
       for(int i=1; i<safeArea.length;i++) {
    	   maxAreaNum = safeArea[i]>maxAreaNum ? safeArea[i] : maxAreaNum;
       }
       
       System.out.println(maxAreaNum);
      
    }
    public static void setZero(int[][] visited) {
    	for(int i=0; i<n;i++) {
    		for(int j=0; j<n;j++) {
    			visited[i][j] =0;
    		}
    	}
    }
    public static void DFS(int x, int y, int num) {
    	visited[x][y]=1;
    	
    	int dx, dy;
    	
    	for(int i=0;i<4;i++) {
    		dx = x+arrayX[i];
    		dy = y+arrayY[i];
    		
    		if(dx>=0 && dx<n && dy>=0 && dy<n && visited[dx][dy]==0 && map[dx][dy]>num) {
    			DFS(dx,dy,num);
    		}
    	}
    }
}
