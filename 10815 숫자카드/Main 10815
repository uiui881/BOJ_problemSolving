import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	public static int[] card;
	public static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer stzr;
    	int n = Integer.parseInt(br.readLine());
    	card = new int[n];
    	stzr = new StringTokenizer(br.readLine());
    	//카드 배열
    	for(int i=0; i<n;i++) {
    		card[i]= Integer.parseInt(stzr.nextToken());
    	}
    	//카드 정렬
    	Arrays.sort(card);
    	
    	int m = Integer.parseInt(br.readLine());
    	stzr = new StringTokenizer(br.readLine());
    	for(int i=0; i<m;i++) {
    		int target = Integer.parseInt(stzr.nextToken());
    		B_Search(target, 0, card.length-1);
    	}
    	System.out.println(sb);
    }
    
    //이분 탐색
    public static void B_Search(int target, int start, int end){
    	
    	if(start>end) { //항상 범위값이 어렵다...
    		//왜 start=end일 경우는 안될까?
    		//배열의 1일 경우!!
    		sb.append("0 ");
    		return;
    	}
    	while(start<=end) {
    		
    		int mid =(start+end)/2;
    		if(target>card[end] || target<card[start]) {
    		sb.append("0 "); //종료조건//탐색범위에 없음
    		return;
    	}
    	
    	if(card[mid]==target) {
    		sb.append("1 ");
    		return;
    	}
    	else if(card[mid]>target) {
    		end = mid-1;
    	}else if(card[mid]<target){
    		start = mid+1;

    	}}}}
