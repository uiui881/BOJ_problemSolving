import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) throws Exception {	
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		Queue<Integer> queue = new LinkedList<Integer>();
		StringTokenizer stzr;
		
		int n = Integer.parseInt(br.readLine());
		String command;
		for(int i=0;i<n;i++) {
			stzr = new StringTokenizer(br.readLine());
			command = stzr.nextToken();
			if(command.equals("push")) {
				queue.add(Integer.parseInt(stzr.nextToken()));
			}
			else if(command.equals("pop")) {
				if(queue.isEmpty()) {
					sb.append("-1\n");
				}
				else {
					sb.append(queue.poll()+"\n");
				}
			}
			else if(command.equals("size")) {
				sb.append(queue.size()+"\n");
			}
			else if(command.equals("empty")) {
				if(queue.isEmpty()) {
					sb.append("1\n");
				}
				else {
					sb.append("0\n");
				}
			}
			else if(command.equals("front")) {
				if(queue.isEmpty()) {
					sb.append("-1\n");
				}
				else {
					sb.append(queue.peek()+"\n");
				}
			}
			else if(command.equals("back")){
				if(queue.isEmpty()) {
					sb.append("-1\n");
				}
				else {
					sb.append(((LinkedList<Integer>)queue).get(queue.size()-1)+"\n");
				}
			}
		}
		System.out.println(sb);
	}
}
